from abc import ABC, abstractmethod
from typing import List, Optional, Tuple

class IUserReadRepository(ABC):
    @abstractmethod
    def get_by_id(self, id: int): ...
    @abstractmethod
    def get_by_username(self, username: str): ...
    @abstractmethod
    def get_by_email(self, email: str): ...

    @abstractmethod
    def exists_by_username(self, username: str) -> bool: ...
    @abstractmethod
    def exists_by_email(self, email: str) -> bool: ...
    @abstractmethod
    def exists_email_excluding_id(self, email: str, exclude_id: int) -> bool: ...

    @abstractmethod
    def get_paginated(
        self, *, page: int, page_size: int, q: str | None = None, user_type: str | None = None
    ) -> Tuple[List[object], int]: ...
